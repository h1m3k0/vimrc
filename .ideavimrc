" Leader键 => <Space>
let g:mapleader=' '
noremap  <Leader>  <Nop>
" Setting
" List of Supported Options
set clipboard=unnamed,unnamedplus " 共享系统剪切板
set nodigraph " 禁用插入模式{c1}<BS>{c2}输入二合字母的功能
set gdefault " 替换时默认为全局(g)
" set guicursor+=a:blinkoff0 " (默认) vim可以这样添加光标禁止闪烁, 但ideavim没有实现
" set history=50 " (默认) 记录:命令的历史数量
set hlsearch " 高亮搜索
set ignorecase " 无视大小写搜索
set incsearch " 实时显示搜索高亮
" iskeyword => (TODO)
" keymodel => (TODO)
set matchpairs=(:),{:},[:] " 设置%匹配的内容
" set maxmapdepth=20 " (默认) 映射的递归深度
" more => (TODO)
set nrformats=hex " 还有bin(二进制), unsigned(非负数), 但这两个ideavim都没有实现
" operatorfunc => (TODO)
" set scroll=10 " (默认) 使用<C-U>和<C-D>向上向下滚动的行数
" selection => (TODO)
set selectmode= " 都是默认进入可视模式, 而不是选择模式
" shell,shellcmdflag,shellxescape,shellxquote => (默认) 执行shell命令(:!)相关配置
" showcmd => (TODO)
set showmode " 显示当前的模式
set smartcase " 智能大小写搜索(全小写时为忽略大小写搜索, 有大写时为精确搜索)
" startofline => (TODO)
set timeout " 组合键等待超时时间后会执行原始按键功能
set timeoutlen=1500 " 组合键等待1.5秒
" viminfo => (TODO)
" virtualedit => (TODO)
set visualbell " 启用了就没有警告铃
set whichwrap=b,s " 允许跨行的键(<BS>,<Space>)
set wrapscan " 搜索能从结尾回绕到开头

" IdeaVim options mapped to IntelliJ-based IDE settings
set scrolljump=1 " 上下滚动的最小行数
set scrolloff=5 " 上下保留的最小行数
set sidescroll=1 " 左右滚动的最小列数
set sidescrolloff=20 " 左右保留的最小列数

" IdeaVim options for IntelliJ-based IDE features
" bomb => (TODO)
" breakindent => (TODO)
" colorcolumn => (TODO)
" fileencoding => (默认) 文件编码
" fileformat => (默认) 设置不同系统的(换行符)格式
set number " 显示行号
set relativenumber " 启用相对行号
" textwidth => (TODO)
set nowrap " 长行不自动换行

" IdeaVim only options
" ideacopypreprocess => (TODO)
" ideaglobalmode => (TODO)
set ideajoin " J合并行时更智能
set ideamarks " marks使用idea的标记
set idearefactormode=select " 执行重命名后进入选择模式
set ideastatusicon=enable " 展示ideavim图标
set ideavimsupport=dialog " ideavim包含日志
set ideawrite=all " :w保存所有文件
set lookupkeys-=<C-J> " 这些键某些情况下不被映射, 去掉<C-J>(如果要映射为<Down>的话)
set trackactionids " 触发了action时会提示actionid(方便写IdeaAction)
" visualdelay => (TODO)

" IdeaVim Plugins
set argtextobj " 参数文本对象 (i/a)a
  let g:argtextobj_pairs='(:),{:},[:],<:>'
set commentary " 注释 gc
set easymotion " (需要安装插件)快速跳转
  " 智能大小写
  let g:EasyMotion_smartcase = 1
  " 禁用默认映射
  let g:EasyMotion_do_mapping = 0
  map  <Leader><Leader>f  <Plug>(easymotion-bd-f)
  map  <Leader><Leader>F  <Plug>(easymotion-bd-f)
  map  <Leader><Leader>t  <Plug>(easymotion-bd-t)
  map  <Leader><Leader>T  <Plug>(easymotion-bd-t)
set exchange " 互换 cx
set functiontextobj " 方法文本对象(需要安装插件) (i/a)f
set highlightedyank " 复制高亮
  let g:highlightedyank_highlight_duration = '2000'
set textobj-indent " 缩进文本对象 (i/a)(i/I)
set matchit " 百分号增强
  map M %
" (禁用) set mini-ai " (i/a)q 引号  (i/a)b 括号
set multiple-curcors " 多光标
set NERDTree " 文件树
  " 光标移动到文件树
  nnoremap  <Leader>ee  :NERDTree<CR>
  " 在文件树找到当前文件
  nnoremap  <Leader>ef  :NERDTreeFind<CR>
  " 关闭/打开文件树
  nnoremap  <Leader>et  :NERDTreeToggle<CR>
set vim-paragraph-motion " 大括号增强
set peekaboo " 显示寄存器内容(需要安装插件)
set quickscope " (需要安装插件)高亮f
  let g:qs_highlight_on_keys = ['f', 'F']
  " 命令符模式不高亮
  onoremap f f
  onoremap F F
set ReplaceWithRegister " 替换 gr
" (禁用) set sneak " s跳转
"   map s <Plug>Sneak_s
"   map S <Plug>Sneak_S
set surround " 环绕 (y/c/d)s
set switch " 切换(需要安装插件)
  " 比如true切换false, !=切换==
  let g:switch_definitions = 'group:basic'
  nnoremap <Tab>   :Switch<CR>
  nnoremap <S-Tab> :SwitchReverse<CR>
set textobj-entire " 全文文本对象 (i/a)e
set which-key " 显示组合键(需要安装插件)

" Basic Mappings
" 更符合逻辑的 Y => y$
map Y y$
" 删除不进入缓存
noremap  s  "_s
" 如果用到surround, 这里不要映射xmap S
nnoremap S  "_S
noremap  x  "_x
noremap  X  "_X
noremap <Leader>c "_c
noremap <Leader>C "_C
noremap <Leader>d "_d
noremap <Leader>D "_D
" 水平移动时保留光标
xnoremap  <  <gv
xnoremap  >  >gv
" 方向键与Esc
if 0
  noremap <C-H>  <Left>|inoremap <C-H>  <Left>|cnoremap <C-H>  <Left>
  noremap <C-J>  <Down>|inoremap <C-J>  <Down>|cnoremap <C-J>  <Down>
  noremap <C-K>    <Up>|inoremap <C-K>    <Up>|cnoremap <C-K>    <Up>
  noremap <C-L> <Right>|inoremap <C-L> <Right>|cnoremap <C-L> <Right>
endif
if 0
  inoremap jk <Esc>
  inoremap jj j
endif
" HLM映射
noremap H ^
noremap L $
" noremap  M  %  " 如果不用matchit
" Emasc模式(Shell模式)
inoremap <C-A> <Home>|cnoremap <C-A> <Home>
inoremap <C-E>  <End>|cnoremap <C-E>  <End>
" 可视模式直接搜索当前选择内容
xnoremap  <silent> /  :call VisualRegister()<CR>:set hls<CR>
function! VisualRegister()
  let l:tmp = @"
  normal! gvy
  let @/ = @"
  let @" = l:tmp
  let @* = l:tmp
endfunction
" 取消搜索高亮
nnoremap <silent> <C-L> <Esc>:<C-U>noh<CR><C-L>

" IdeaVim Action
" Mappings
map   <F1> <Action>(GotoNextError)     " 跳转错误 F2
map <S-F1> <Action>(GotoPreviousError) " 跳转错误 Shift-F2
map   <F2> <Action>(VcsShowNextChangeMarker) " 跳转vsc改动
map <S-F2> <Action>(VcsShowPrevChangeMarker) " 跳转vsc改动
map <Leader>r <Action>(RenameElement) " 重命名 Shift-F6
map <Leader>ff <Action>(GotoFile)   " 文件搜索 Ctrl-Shift-N
map <Leader>fg <Action>(FindInPath) " 文本搜索 Ctrl-Shift-F
map <Leader>t <Action>(ActivateTerminalToolWindow) " 打开终端 Alt-F12
map <Leader>l <Action>(ReformatCode) " 格式化 Alt-Ctrl-L
map <C-S> <Action>(EditorSelectWord) " 选择 Ctrl-w
map gd <Action>(GotoDeclaration)     " 跳转到定义 Ctrl-B (不完全是)
map gR <Action>(GotoDeclaration)     " 跳转到关联 Ctrl-B (不完全是)
map gI <Action>(GotoImplementation)  " 跳转到实现 Alt-Ctrl-B
map gy <Action>(GotoTypeDeclaration) " 跳转到类型 Ctrl-Shift-B
map gm <Action>(GotoSuperMethod)     " 跳转到父方法 Ctrl-U
map <Leader>v <Action>(IntroduceVariable) " 引入变量 Alt-Ctrl-V
map <Leader>; <Action>(EditorCompleteStatement) " 补全 Ctrl-Shift-Enter
map <Leader>o <Action>(OptimizeImports) " 优化导入 Ctrl-Shift-O
map <Leader>s <Action>(SurroundWith) " 环绕 Alt-Ctrl-T
map <Leader>i <Action>(ShowIntentionActions) " 提示 Alt-Enter

" Commands
command! VimReload call IdeaVimAction('IdeaVim.ReloadVimRc.reload')
command! Run call IdeaVimAction('Run')
command! RunClass call IdeaVimAction('RunClass')
command! Debug call IdeaVimAction('Debug')
command! Stop call IdeaVimAction('Stop')
command! MavenReload call IdeaVimAction('Maven.Reimport Maven.UpdateFolders')
command! Git call IdeaVimAction('Git.Menu')
command! Vim call IdeaVimAction('VimPluginToggle')

" Function
function! IdeaVimAction(actions)
    let l:actions = split(a:actions, ' ')
    for action in l:actions
        execute 'action '.l:action
    endfor
endfunction

" 清除选择模式的映射
smapclear

" Maybe Bug
inoremap <Esc> <Esc><Esc> " 部分情况需要按两下<Esc>
